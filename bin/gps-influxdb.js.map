{"version":3,"file":"gps-influxdb.js","sources":["../src/index.js"],"sourcesContent":["import SystemGPS from '@mark48evo/system-gps';\nimport { InfluxDB, FieldType } from 'influx';\nimport amqplib from 'amqplib';\nimport Debug from 'debug';\nimport pmx from 'pmx';\n\nconst debug = Debug('gps:influxdb');\n\npmx.init({});\n\nconst messagesProcessed = pmx.probe().counter({\n  name: 'GPS Messages Processed',\n});\n\nconst messagesProcessedPerMin = pmx.probe().meter({\n  name: 'msg/min',\n  samples: 1,\n  timeframe: 60,\n});\n\nconst config = {\n  influxHost: process.env.INFLUXDB_HOST || 'localhost',\n  influxDB: process.env.INFLUXDB_DB || 'mark48evo',\n  host: process.env.RABBITMQ_HOST || 'amqp://localhost',\n};\n\nconst influx = new InfluxDB({\n  host: config.influxHost,\n  database: config.influxDB,\n  schema: [\n    {\n      measurement: 'gps',\n      fields: {\n        numberOfSatellites: FieldType.INTEGER,\n        latitude: FieldType.FLOAT,\n        longitude: FieldType.FLOAT,\n        heightEllipsoid: FieldType.FLOAT,\n        heightSeaLevel: FieldType.FLOAT,\n        speed: FieldType.FLOAT,\n        velocityNorth: FieldType.FLOAT,\n        velocityEast: FieldType.FLOAT,\n        velocityDown: FieldType.FLOAT,\n        headingOfMotion: FieldType.FLOAT,\n        speedAccuracy: FieldType.FLOAT,\n        headingAccuracy: FieldType.FLOAT,\n        horizontalAccuracy: FieldType.FLOAT,\n        verticalAccuracy: FieldType.FLOAT,\n      },\n      tags: [\n        'fixType',\n      ],\n    },\n  ],\n});\n\nasync function main() {\n  await influx.getDatabaseNames()\n    .then(async (names) => {\n      if (!names.includes(config.influxDB)) {\n        debug(`Creating InfluxDB \"${config.influxDB}\" database`);\n\n        await influx.createDatabase(config.influxDB);\n\n        return Promise.resolve();\n      }\n\n      return Promise.resolve();\n    });\n\n  const connect = await amqplib.connect(config.host);\n  const channel = await connect.createChannel();\n\n  const systemGPS = await SystemGPS(channel);\n\n  systemGPS.on('nav.pvt', (data) => {\n    messagesProcessed.inc();\n    messagesProcessedPerMin.mark();\n\n    const packet = data.data;\n\n    const fields = {\n      numberOfSatellites: packet.numSV,\n      latitude: packet.lat,\n      longitude: packet.lon,\n      heightEllipsoid: packet.height / 1000,\n      heightSeaLevel: packet.hMSL / 1000,\n      speed: packet.gSpeed * 0.0036,\n      velocityNorth: packet.velN * 0.0036,\n      velocityEast: packet.velE * 0.0036,\n      velocityDown: packet.velD * 0.0036,\n      headingOfMotion: packet.headMot,\n      speedAccuracy: packet.sAcc * 0.0036,\n      headingAccuracy: packet.headAcc,\n      horizontalAccuracy: packet.hAcc / 1000,\n      verticalAccuracy: packet.vAcc / 1000,\n    };\n\n    const tags = {\n      fixType: packet.fixType.string,\n    };\n\n    influx.writePoints([\n      {\n        measurement: 'gps',\n        tags,\n        fields,\n        timestamp: new Date(`${packet.year}-${packet.month}-${packet.day} ${packet.hour}:${packet.minute}:${packet.second}  UTC`),\n      },\n    ]).catch((err) => {\n      console.error(`InfluxDB Error: \"${err.message()}\" \"${err.stack}\"`);\n    });\n  });\n}\n\nmain();\n"],"names":["debug","Debug","pmx","init","messagesProcessed","probe","counter","messagesProcessedPerMin","meter","config","process","env","INFLUXDB_HOST","INFLUXDB_DB","RABBITMQ_HOST","influx","InfluxDB","influxHost","influxDB","FieldType","INTEGER","FLOAT","main","getDatabaseNames","then","names","includes","createDatabase","Promise","resolve","connect","amqplib","host","channel","createChannel","systemGPS","SystemGPS","on","data","inc","mark","packet","fields","numSV","lat","lon","height","hMSL","gSpeed","velN","velE","velD","headMot","sAcc","headAcc","hAcc","vAcc","tags","fixType","string","writePoints","Date","year","month","day","hour","minute","second","catch","err","error","message","stack"],"mappings":";;;;;;;;;;;AAMA,MAAMA,QAAQC,MAAM,cAAN,CAAd;AAEAC,IAAIC,IAAJ,CAAS,EAAT;AAEA,MAAMC,oBAAoBF,IAAIG,KAAJ,GAAYC,OAAZ,CAAoB;QACtC;CADkB,CAA1B;AAIA,MAAMC,0BAA0BL,IAAIG,KAAJ,GAAYG,KAAZ,CAAkB;QAC1C,SAD0C;WAEvC,CAFuC;aAGrC;CAHmB,CAAhC;AAMA,MAAMC,SAAS;cACDC,QAAQC,GAAR,CAAYC,aAAZ,IAA6B,WAD5B;YAEHF,QAAQC,GAAR,CAAYE,WAAZ,IAA2B,WAFxB;QAGPH,QAAQC,GAAR,CAAYG,aAAZ,IAA6B;CAHrC;AAMA,MAAMC,WAAS,IAAIC,eAAJ,CAAa;QACpBP,OAAOQ,UADa;YAEhBR,OAAOS,QAFS;UAGlB,CACN;iBACe,KADf;YAEU;0BACcC,iBAAUC,OADxB;gBAEID,iBAAUE,KAFd;iBAGKF,iBAAUE,KAHf;uBAIWF,iBAAUE,KAJrB;sBAKUF,iBAAUE,KALpB;aAMCF,iBAAUE,KANX;qBAOSF,iBAAUE,KAPnB;oBAQQF,iBAAUE,KARlB;oBASQF,iBAAUE,KATlB;uBAUWF,iBAAUE,KAVrB;qBAWSF,iBAAUE,KAXnB;uBAYWF,iBAAUE,KAZrB;0BAacF,iBAAUE,KAbxB;wBAcYF,iBAAUE;KAhBhC;UAkBQ,CACJ,SADI;GAnBF;CAHK,CAAf;;AA6BA,eAAeC,IAAf,GAAsB;QACdP,SAAOQ,gBAAP,GACHC,IADG,CACE,MAAOC,KAAP,IAAiB;QACjB,CAACA,MAAMC,QAAN,CAAejB,OAAOS,QAAtB,CAAL,EAAsC;YAC7B,sBAAqBT,OAAOS,QAAS,YAA5C;YAEMH,SAAOY,cAAP,CAAsBlB,OAAOS,QAA7B,CAAN;aAEOU,QAAQC,OAAR,EAAP;;;WAGKD,QAAQC,OAAR,EAAP;GAVE,CAAN;QAaMC,UAAU,MAAMC,QAAQD,OAAR,CAAgBrB,OAAOuB,IAAvB,CAAtB;QACMC,UAAU,MAAMH,QAAQI,aAAR,EAAtB;QAEMC,YAAY,MAAMC,UAAUH,OAAV,CAAxB;YAEUI,EAAV,CAAa,SAAb,EAAyBC,IAAD,IAAU;sBACdC,GAAlB;4BACwBC,IAAxB;UAEMC,SAASH,KAAKA,IAApB;UAEMI,SAAS;0BACOD,OAAOE,KADd;gBAEHF,OAAOG,GAFJ;iBAGFH,OAAOI,GAHL;uBAIIJ,OAAOK,MAAP,GAAgB,IAJpB;sBAKGL,OAAOM,IAAP,GAAc,IALjB;aAMNN,OAAOO,MAAP,GAAgB,MANV;qBAOEP,OAAOQ,IAAP,GAAc,MAPhB;oBAQCR,OAAOS,IAAP,GAAc,MARf;oBASCT,OAAOU,IAAP,GAAc,MATf;uBAUIV,OAAOW,OAVX;qBAWEX,OAAOY,IAAP,GAAc,MAXhB;uBAYIZ,OAAOa,OAZX;0BAaOb,OAAOc,IAAP,GAAc,IAbrB;wBAcKd,OAAOe,IAAP,GAAc;KAdlC;UAiBMC,OAAO;eACFhB,OAAOiB,OAAP,CAAeC;KAD1B;aAIOC,WAAP,CAAmB,CACjB;mBACe,KADf;UAAA;YAAA;iBAIa,IAAIC,IAAJ,CAAU,GAAEpB,OAAOqB,IAAK,IAAGrB,OAAOsB,KAAM,IAAGtB,OAAOuB,GAAI,IAAGvB,OAAOwB,IAAK,IAAGxB,OAAOyB,MAAO,IAAGzB,OAAO0B,MAAO,OAAvG;KALI,CAAnB,EAOGC,KAPH,CAOUC,GAAD,IAAS;cACRC,KAAR,CAAe,oBAAmBD,IAAIE,OAAJ,EAAc,MAAKF,IAAIG,KAAM,GAA/D;KARF;GA3BF;;;AAwCFlD"}